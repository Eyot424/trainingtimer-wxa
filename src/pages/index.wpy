<style lang="less">
  .userinfo {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .userinfo-avatar {
    width: 80rpx;
    height: 80rpx;
    border-radius: 50%;
  }

  .userinfo-nickname {
    color: #aaa;
  }
</style>
<template>
  <view class="container">
    <view class="userinfo" @tap="handleViewTap">
      <image class="userinfo-avatar" src="{{ userInfo.avatarUrl }}" background-size="cover"/>
      <view class="userinfo-nickname">{{ userInfo.nickName }}</view>
    </view>
    <panel>
      <view class="title" slot="title">制定训练任务</view>
      <picker bindchange="bindPickerChange" value="{{trainingIndex}}" range="{{trainingName}}">
        <view class="picker">
          训练项目：{{ trainingName[trainingIndex] }}
        </view>
      </picker>
    </panel>

    <!-- <panel>
      <view class="title" slot="title">测试并发网络请求</view>
      <button @tap="toast" size="mini">第三方组件</button>
      <view>返回结果: <text>{{netrst}}</text></view>
      <button @tap="request" size="mini"> 点我发起10个请求 </button>
    </panel> -->

    <toast />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Panel from '@/components/panel' // alias example
  import Toast from 'wepy-com-toast'


  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '训练计时器'
    }

    components = {
      panel: Panel,
      toast: Toast
    }

    data = {
      userInfo: {
        nickName: '加载中...'
      },
      netrst: '',
      trainingName: ['胸部训练', '核心训练', '腿部训练', '背部训练', '肩部训练', '手臂训练'],
      chestTraining: ['平板杠铃卧推', '平板哑铃卧推', '上斜杠铃卧推', '上斜哑铃卧推', '仰卧飞鸟', '蝴蝶机夹胸' ],
      coreTraining: ['传统硬拉', '罗马尼亚硬拉', '农夫行走', '悬臂举腿', '山羊挺身'],
      legTraining: ['负重深蹲', '箭步蹲', '轴上深蹲', '坐姿腿屈伸', '胸前深蹲', '仰卧斜上蹬'],
      backTraing: ['引体向上', '杠铃划船', '哑铃划船', '高位下拉', '坐姿划船'],
      shoulderTrainging: ['倒立', '杠铃上举', '哑铃上举', '站姿哑铃飞鸟', '俯身哑铃飞鸟', '前平举'],
      armTraining: ['站姿杠铃弯举', '站姿哑铃弯举', '上斜哑铃弯举', '两头绳下压', '双杠臂屈伸', '窄握卧推', '仰卧臂屈伸' ],
      trainingType: ['chestTraining', 'coreTraining', 'legTraining', 'backTraing', 'shoulderTrainging', 'armTraining'],
      trainingIndex: 0
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      bindPickerChange (e) {
        this.trainingIndex = e.detail.value
      },
      toast () {
        let promise = this.$invoke('toast', 'show', {
          title: '自定义标题',
          img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
        })

        promise.then((d) => {
          console.log('toast done')
        })
      },
      request () {
        let self = this
        let i = 10
        let map = ['MA==', 'MQo=', 'Mg==', 'Mw==', 'NA==', 'NQ==', 'Ng==', 'Nw==', 'OA==', 'OQ==']
        while (i--) {
          wepy.request({
            url: 'https://www.madcoder.cn/tests/sleep.php?time=1&t=css&c=' + map[i] + '&i=' + i,
            success: function (d) {
              self.netrst += d.data + '.'
              self.$apply()
            }
          })
        }
      },
      counterEmit (...args) {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    events = {
      'index-emit': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
    }

    onLoad() {
      this.$parent.getUserInfo( userInfo => {
        if (userInfo) {
          this.userInfo = userInfo
        }
        this.$apply()
      })
    }
  }
</script>
